Type Conversion:
	byte value is 256:
	while converting it into Int it perform modular operation
	eg:
	int a = 257
	byte k = (byte) a;
	Sout(k); // ans = 1;
Type PRomoting:
	byte a = 10;
	byte b = 30;
	int k = a*b;
	sout(k);//it goes out of range (256)but it promtes to integer //ans 300
=====================================================================================
 --> String is actually a class all the primitive datatypes starts with small letter 
class only have the Capital letter
---->String is immutable
==============================
static block:
	-always called 1st
	-class is loaded in the JVM class loading field then Object is created
	-class loads and the static block is called
	-Using the static we can create something that's for class member not an object member
	-without creating an object the class is also not loaded (static is also not called)

without creating the object load class:

Class.forName(className:"Mobile");

Main method is always static without creating obj wee have to call....Main is the 
starting point of an execution so solve the problem we created main as static.

static variable is updated....what is assigned to it in the last
eg:
static int var = 10;
ob.var = 100;
ob1.var = 110;
//Ans is : 110 ---it considered only what is lastly updated.
if non-static key word means what is assigned to his it will hold that in memory
wihtout updating the last one is assigned 


====================================================================================

encapsulation:

that is specifically used for Security concern- eg: accessing the data 
=====================================================================

AutoBoxing:

reference type(wrapper class) ---> Primitive datatype

Unboxing:

primitive datatype ---> reference type(wrapper class)
======================================

without specifying the extending class every class Extends defaultly 
to the "Object class"
===============================
polymirphism

CompileTime Polymorphism - Overloading - static polymorphism - occurs in same(single)class

Runtime Polymorphism - Overriding - dynamic polymorphism

=================================================================
Super(inheritance)
 

if the child class has a constructor then the 1st line always a Super method 
that calls the parent class.
explictly we make super as constructed means then only it calls the parent constructed method

=============================================================================

static binding:

the static method cannot be overridden:

so the parent class method is always called also if the child class has the same
method.

==============================================================================
Abstract class:

cannot be instantiated so you cannot create the object of it.

in this we can implement the concrete method also. so it is always called partial 
abstraction.


============================================================
one interface cannot implements another interface 

only it will extends


class should implement the interface
=========================================================================

final variables are implemented in the constructor field only
if static final word means it should be initialized only in static block

========================================================================
Serialization:

Convert object into Stream of bytes - then only write into file.

Wrapper class:

---> primitive doesn't allow null values, Wrapper class allows null values.
---> convert primitive data types into objects.
---> when you need objects instead of primitive data types.
---> Wrapper objects holds much more memory compare to primitive data types.
==========================================================================
transient key word is used:


--> all the fields of the class has written into a file after being converted to stream of bytes.
---> but if the field is annotated as transient keyword that field is not written into file.





 